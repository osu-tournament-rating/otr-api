services:
  api:
    image: "stagecodes/otr-api:${TAG:-latest}"
    container_name: api
    ports:
      - "3700:8080"
    env_file:
      - api.env
    depends_on:
      - db
      - redis
    restart: always
    profiles:
      - staging
      - production

  dataworkerservice:
    image: "stagecodes/otr-data-worker-service:${TAG:-latest}"
    container_name: dataworkerservice
    env_file:
      - dataworkerservice.env
    depends_on:
      - db
      - redis
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    profiles:
      - production

  dws:
    image: "stagecodes/otr-dws:${TAG:-latest}"
    container_name: dws
    env_file:
      - dws.env
    depends_on:
      - db
      - rabbitmq
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    profiles:
      - staging
      - production

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    depends_on:
      - collector
      - tempo
    volumes:
      - "grafana_storage:/var/lib/grafana"
    restart: always
    profiles:
      - staging
      - production

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: always
    profiles:
      - staging
      - production

  db:
    container_name: db
    image: postgres:17
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - db.env
    ports:
      - "5432:5432"
    restart: always
    profiles:
      - staging
      - production

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - redis:/data
    profiles:
      - staging
      - production

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4-management
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - rabbitmq.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    profiles:
      - staging
      - production

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    env_file:
      - postgres_exporter.env
    links:
      - db
      - prometheus
    restart: always
    profiles:
      - staging
      - production

  collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: collector
    command: ["--config=/etc/collector.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/collector.yml:ro
    depends_on:
      - tempo
    restart: always
    profiles:
      - staging
      - production

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: ["--config.file=/etc/tempo.yml"]
    volumes:
      - ./tempo.yml:/etc/tempo.yml:ro
      - tempo_storage:/var/lib/tempo
    ports:
      - "3200:3200"
      - "4317:4317"
    restart: always
    profiles:
      - staging
      - production

  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - "3100:3100"
    command: ["--config.file=/etc/loki/loki.yml"]
    volumes:
      - loki_storage:/loki
      - ./loki.yml:/etc/loki/loki.yml:ro
    restart: always
    profiles:
      - staging
      - production

  minio:
    image: minio/minio:latest
    container_name: minio
    command: minio server --console-address ":9001" --address ":9000" /minio/data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "minio_data:/minio/data"
    env_file:
      - ./minio.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    restart: always
    profiles:
      - staging
      - production

volumes:
  db_data:
  grafana_storage:
  tempo_storage:
  loki_storage:
  minio_data:
  redis:
  rabbitmq_data:
