name: Staging Deploy

on:
  workflow_dispatch:
  push:
    branches: [master]

jobs:
  build_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Build
        run: dotnet build -c Release

      - name: Test
        run: dotnet test -c Release --verbosity normal

  publish:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: stagecodes
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API
        run: |
          docker build -t stagecodes/otr-api-staging -f API.Dockerfile .
          docker push stagecodes/otr-api-staging

      - name: Build and push DataWorkerService
        run: |
          docker build -t stagecodes/otr-data-worker-service-staging -f DataWorkerService.Dockerfile .
          docker push stagecodes/otr-data-worker-service-staging

  deploy:
    environment: Staging
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set loki.yml s3
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: './cfg/loki.yml'
          propertyPath: 'storage_config.aws.s3'
          value: ${{ secrets.LOKI_S3 }}
          commitChange: false

      - name: Set loki.yml access_key 
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: './cfg/loki.yml'
          propertyPath: 'storage_config.aws.access_key_id'
          value: ${{ secrets.S3_ACCESS_KEY }}
          commitChange: false

      - name: Set loki.yml secret_key 
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: './cfg/loki.yml'
          propertyPath: 'storage_config.aws.secret_access_key'
          value: ${{ secrets.S3_SECRET_KEY }}
          commitChange: false

      - name: Set tempo.yml access_key 
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: './cfg/tempo.yml'
          propertyPath: 'storage.trace.s3.access_key'
          value: ${{ secrets.S3_ACCESS_KEY }}
          commitChange: false

      - name: Set tempo.yml secret_key 
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: './cfg/tempo.yml'
          propertyPath: 'storage.trace.s3.secret_key'
          value: ${{ secrets.S3_SECRET_KEY }}
          commitChange: false

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Create .env files
        run: |
          echo "${{ secrets.API_ENV }}" > api.env
          echo "${{ secrets.DATAWORKERSERVICE_ENV }}" > dataworkerservice.env
          echo "${{ secrets.DB_ENV }}" > db.env
          echo "${{ secrets.POSTGRES_EXPORTER_ENV }}" > postgres_exporter.env
          echo "${{ secrets.MINIO_ENV }}" > minio.env

      - name: Generate migrations script
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef migrations script --idempotent --context OtrContext --project Database --startup-project API -o script.sql

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "*.env,./cfg/*.yml,script.sql"
          target: "~/otr-api/"

      - name: Apply migrations and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p ~/otr-api || true
            cd ~/otr-api
            mv ./cfg/* .
            rm -r ./cfg
            cat script.sql | docker exec -i db psql -U postgres -d postgres
            docker compose -f docker-compose-staging.yml pull
            docker compose -f docker-compose-staging.yml up -d
            rm script.sql
