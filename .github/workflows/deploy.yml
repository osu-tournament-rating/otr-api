name: API Deploy

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
        description: "Environment to deploy to"

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Build
        run: dotnet build -c Release

      - name: Test
        run: dotnet test -c Release --verbosity normal

  publish:
    needs: build_test
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.set-tag.outputs.PRIMARY_TAG }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker Tags
        id: set-tag
        run: |
          api_image_prefix="${{ secrets.DOCKERHUB_USERNAME }}/otr-api"
          worker_image_prefix="${{ secrets.DOCKERHUB_USERNAME }}/otr-data-worker-service"

          if [[ "${{ inputs.target }}" == "Staging" ]]; then
            echo "PRIMARY_TAG=staging" >> $GITHUB_OUTPUT
            echo "API_TAGS=${api_image_prefix}:staging" >> $GITHUB_OUTPUT
            echo "WORKER_TAGS=${worker_image_prefix}:staging" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.target }}" == "Production" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "PRIMARY_TAG=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            {
              echo 'API_TAGS<<EOF'
              echo "${api_image_prefix}:${{ github.ref_name }}"
              echo "${api_image_prefix}:latest"
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
            {
              echo 'WORKER_TAGS<<EOF'
              echo "${worker_image_prefix}:${{ github.ref_name }}"
              echo "${worker_image_prefix}:latest"
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
          else
            echo "Invalid target: ${{ inputs.target }}"
            exit 1
          fi

      - name: Build and Push API Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: API.Dockerfile
          push: true
          tags: ${{ steps.set-tag.outputs.API_TAGS }}

      - name: Build and Push DataWorkerService Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: DataWorkerService.Dockerfile
          push: true
          tags: ${{ steps.set-tag.outputs.WORKER_TAGS }}

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    environment: ${{ inputs.target }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set loki.yml s3
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "./cfg/loki.yml"
          propertyPath: "storage_config.aws.s3"
          value: ${{ secrets.LOKI_S3 }}
          commitChange: false

      - name: Set loki.yml access_key
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "./cfg/loki.yml"
          propertyPath: "storage_config.aws.access_key_id"
          value: ${{ secrets.S3_ACCESS_KEY }}
          commitChange: false

      - name: Set loki.yml secret_key
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "./cfg/loki.yml"
          propertyPath: "storage_config.aws.secret_access_key"
          value: ${{ secrets.S3_SECRET_KEY }}
          commitChange: false

      - name: Set tempo.yml access_key
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "./cfg/tempo.yml"
          propertyPath: "storage.trace.s3.access_key"
          value: ${{ secrets.S3_ACCESS_KEY }}
          commitChange: false

      - name: Set tempo.yml secret_key
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "./cfg/tempo.yml"
          propertyPath: "storage.trace.s3.secret_key"
          value: ${{ secrets.S3_SECRET_KEY }}
          commitChange: false

      - name: Create .env files
        run: |
          echo "${{ secrets.API_ENV }}" > api.env
          echo "${{ secrets.DATAWORKERSERVICE_ENV }}" > dataworkerservice.env
          echo "${{ secrets.DB_ENV }}" > db.env
          echo "${{ secrets.POSTGRES_EXPORTER_ENV }}" > postgres_exporter.env
          echo "${{ secrets.MINIO_ENV }}" > minio.env
          echo "${{ secrets.RABBITMQ_ENV }}" > rabbitmq.env

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Generate migrations script
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef migrations script --idempotent --context OtrContext --project Database --startup-project API -o script.sql

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "*.env,./cfg/*.yml,script.sql"
          target: "~/otr-api/"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p ~/otr-api || true
            cd ~/otr-api
            mv ./cfg/* .
            rm -r ./cfg
            cat script.sql | docker exec -i db psql -U postgres -d postgres
            export TAG=${{ needs.publish.outputs.TAG }}
            docker compose --profile ${{ inputs.target == 'Production' && 'production' || 'staging' }} pull
            docker compose --profile ${{ inputs.target == 'Production' && 'production' || 'staging' }} up -d
            rm script.sql
