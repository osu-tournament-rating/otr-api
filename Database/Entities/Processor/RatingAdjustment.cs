using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics.CodeAnalysis;
using Database.Enums;

namespace Database.Entities.Processor;

/// <summary>
/// Describes an individual change to a <see cref="Processor.PlayerRating"/>
/// </summary>
/// <remarks>
/// Generated by the <a href="https://github.com/osu-tournament-rating/otr-processor">o!TR Processor</a>
/// <br/><br/>
/// A full collection of <see cref="RatingAdjustment"/>s functionally outline the change in rating over time for a
/// <see cref="Entities.Player"/> in a <see cref="Ruleset"/>.
/// Where <see cref="Processor.PlayerRating"/> describes final and current rating information,
/// a collection of <see cref="RatingAdjustment"/>s describe the changes in rating that bring it to that final state.
/// For example, a <see cref="RatingAdjustment"/> is created for each <see cref="Entities.Match"/> played
/// or elapsed period of decay. This distinction is denoted by the <see cref="AdjustmentType"/>
/// </remarks>
[Table("rating_adjustments")]
[SuppressMessage("ReSharper", "EntityFramework.ModelValidation.CircularDependency")]
public class RatingAdjustment : EntityBase
{
    /// <summary>
    /// The <see cref="RatingAdjustmentType"/> of the adjustment
    /// </summary>
    [Column("adjustment_type")]
    public RatingAdjustmentType AdjustmentType { get; init; }

    /// <summary>
    /// Timestamp for when the adjustment was applied
    /// </summary>
    [Column("timestamp")]
    public DateTime Timestamp { get; init; }

    /// <summary>
    /// Rating before the adjustment was considered
    /// </summary>
    [Column("rating_before")]
    public double RatingBefore { get; init; }

    /// <summary>
    /// Rating after the adjustment was considered
    /// </summary>
    [Column("rating_after")]
    public double RatingAfter { get; init; }

    /// <summary>
    /// Volatility before the adjustment was considered
    /// </summary>
    [Column("volatility_before")]
    public double VolatilityBefore { get; init; }

    /// <summary>
    /// Volatility after the adjustment was considered
    /// </summary>
    [Column("volatility_after")]
    public double VolatilityAfter { get; init; }

    /// <summary>
    /// Id of the <see cref="Processor.PlayerRating"/> that the adjustment affects
    /// </summary>
    [Column("player_rating_id")]
    public int PlayerRatingId { get; init; }

    /// <summary>
    /// The <see cref="Processor.PlayerRating"/> that the adjustment affects
    /// </summary>
    public PlayerRating PlayerRating { get; init; } = null!;

    /// <summary>
    /// Id of the <see cref="Entities.Player"/> the adjustment was generated for
    /// </summary>
    [Column("player_id")]
    public int PlayerId { get; init; }

    /// <summary>
    /// The <see cref="Entities.Player"/> the adjustment was generated for
    /// </summary>
    public Player Player { get; init; } = null!;

    /// <summary>
    /// Id of the <see cref="Entities.Match"/> the rating stat was generated for
    /// </summary>
    /// <remarks>
    /// Optional. Only populated if <see cref="AdjustmentType"/> is <see cref="RatingAdjustmentType.Match"/>
    /// </remarks>
    [Column("match_id")]
    public int? MatchId { get; init; }

    /// <summary>
    /// The <see cref="Entities.Match"/> the rating stat was generated for
    /// </summary>
    /// <remarks>
    /// Optional. Only populated if <see cref="AdjustmentType"/> is <see cref="RatingAdjustmentType.Match"/>
    /// </remarks>
    public Match? Match { get; init; }

    /// <summary>
    /// Total change in rating
    /// </summary>
    [NotMapped]
    public double RatingDelta => RatingBefore - RatingAfter;

    /// <summary>
    /// Total change in volatility
    /// </summary>
    [NotMapped]
    public double VolatilityDelta => VolatilityBefore - VolatilityAfter;
}
