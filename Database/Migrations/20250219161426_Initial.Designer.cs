// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(OtrContext))]
    [Migration("20250219161426_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entities.Beatmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("Ar")
                        .HasColumnType("double precision")
                        .HasColumnName("ar");

                    b.Property<int?>("BeatmapsetId")
                        .HasColumnType("integer")
                        .HasColumnName("beatmapset_id");

                    b.Property<double>("Bpm")
                        .HasColumnType("double precision")
                        .HasColumnName("bpm");

                    b.Property<int>("CountCircle")
                        .HasColumnType("integer")
                        .HasColumnName("count_circle");

                    b.Property<int>("CountSlider")
                        .HasColumnType("integer")
                        .HasColumnName("count_slider");

                    b.Property<int>("CountSpinner")
                        .HasColumnType("integer")
                        .HasColumnName("count_spinner");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Cs")
                        .HasColumnType("double precision")
                        .HasColumnName("cs");

                    b.Property<string>("DiffName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("diff_name");

                    b.Property<int>("DrainLength")
                        .HasColumnType("integer")
                        .HasColumnName("drain_length");

                    b.Property<bool>("HasData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("has_data");

                    b.Property<double>("Hp")
                        .HasColumnType("double precision")
                        .HasColumnName("hp");

                    b.Property<int?>("MaxCombo")
                        .HasColumnType("integer")
                        .HasColumnName("max_combo");

                    b.Property<double>("Od")
                        .HasColumnType("double precision")
                        .HasColumnName("od");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint")
                        .HasColumnName("osu_id");

                    b.Property<int>("RankedStatus")
                        .HasColumnType("integer")
                        .HasColumnName("ranked_status");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<double>("Sr")
                        .HasColumnType("double precision")
                        .HasColumnName("sr");

                    b.Property<long>("TotalLength")
                        .HasColumnType("bigint")
                        .HasColumnName("total_length");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_beatmaps");

                    b.HasIndex("BeatmapsetId")
                        .HasDatabaseName("ix_beatmaps_beatmapset_id");

                    b.HasIndex("OsuId")
                        .IsUnique()
                        .HasDatabaseName("ix_beatmaps_osu_id");

                    b.ToTable("beatmaps", (string)null);
                });

            modelBuilder.Entity("Database.Entities.BeatmapAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("BeatmapId")
                        .HasColumnType("integer")
                        .HasColumnName("beatmap_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Mods")
                        .HasColumnType("integer")
                        .HasColumnName("mods");

                    b.Property<double>("Sr")
                        .HasColumnType("double precision")
                        .HasColumnName("sr");

                    b.HasKey("Id")
                        .HasName("pk_beatmap_attributes");

                    b.HasIndex("BeatmapId", "Mods")
                        .IsUnique()
                        .HasDatabaseName("ix_beatmap_attributes_beatmap_id_mods");

                    b.ToTable("beatmap_attributes", (string)null);
                });

            modelBuilder.Entity("Database.Entities.Beatmapset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("artist");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creator_id");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint")
                        .HasColumnName("osu_id");

                    b.Property<DateTime?>("RankedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ranked_date");

                    b.Property<int>("RankedStatus")
                        .HasColumnType("integer")
                        .HasColumnName("ranked_status");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_beatmapsets");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_beatmapsets_creator_id");

                    b.HasIndex("OsuId")
                        .IsUnique()
                        .HasDatabaseName("ix_beatmapsets_osu_id");

                    b.ToTable("beatmapsets", (string)null);
                });

            modelBuilder.Entity("Database.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeatmapId")
                        .HasColumnType("integer")
                        .HasColumnName("beatmap_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_processing_date")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.Property<int>("Mods")
                        .HasColumnType("integer")
                        .HasColumnName("mods");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint")
                        .HasColumnName("osu_id");

                    b.Property<int>("ProcessingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("processing_status");

                    b.Property<int>("RejectionReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("rejection_reason");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<int>("ScoringType")
                        .HasColumnType("integer")
                        .HasColumnName("scoring_type");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("TeamType")
                        .HasColumnType("integer")
                        .HasColumnName("team_type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("verification_status");

                    b.Property<int>("WarningFlags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("warning_flags");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.HasIndex("BeatmapId")
                        .HasDatabaseName("ix_games_beatmap_id");

                    b.HasIndex("MatchId")
                        .HasDatabaseName("ix_games_match_id");

                    b.HasIndex("OsuId")
                        .IsUnique()
                        .HasDatabaseName("ix_games_osu_id");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("ix_games_start_time");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("Database.Entities.GameAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_game_admin_notes");

                    b.HasIndex("AdminUserId")
                        .HasDatabaseName("ix_game_admin_notes_admin_user_id");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_game_admin_notes_reference_id");

                    b.ToTable("game_admin_notes", (string)null);
                });

            modelBuilder.Entity("Database.Entities.GameAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer")
                        .HasColumnName("action_user_id");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id_lock");

                    b.HasKey("Id")
                        .HasName("pk_game_audits");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_game_audits_reference_id");

                    b.ToTable("game_audits", (string)null);
                });

            modelBuilder.Entity("Database.Entities.GameScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Count100")
                        .HasColumnType("integer")
                        .HasColumnName("count100");

                    b.Property<int>("Count300")
                        .HasColumnType("integer")
                        .HasColumnName("count300");

                    b.Property<int>("Count50")
                        .HasColumnType("integer")
                        .HasColumnName("count50");

                    b.Property<int>("CountGeki")
                        .HasColumnType("integer")
                        .HasColumnName("count_geki");

                    b.Property<int>("CountKatu")
                        .HasColumnType("integer")
                        .HasColumnName("count_katu");

                    b.Property<int>("CountMiss")
                        .HasColumnType("integer")
                        .HasColumnName("count_miss");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_processing_date")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("integer")
                        .HasColumnName("max_combo");

                    b.Property<int>("Mods")
                        .HasColumnType("integer")
                        .HasColumnName("mods");

                    b.Property<bool>("Pass")
                        .HasColumnType("boolean")
                        .HasColumnName("pass");

                    b.Property<bool>("Perfect")
                        .HasColumnType("boolean")
                        .HasColumnName("perfect");

                    b.Property<int>("Placement")
                        .HasColumnType("integer")
                        .HasColumnName("placement");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("ProcessingStatus")
                        .HasColumnType("integer")
                        .HasColumnName("processing_status");

                    b.Property<int>("RejectionReason")
                        .HasColumnType("integer")
                        .HasColumnName("rejection_reason");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("Team")
                        .HasColumnType("integer")
                        .HasColumnName("team");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("verification_status");

                    b.HasKey("Id")
                        .HasName("pk_game_scores");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_scores_game_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_game_scores_player_id");

                    b.HasIndex("PlayerId", "GameId")
                        .IsUnique()
                        .HasDatabaseName("ix_game_scores_player_id_game_id");

                    b.ToTable("game_scores", (string)null);
                });

            modelBuilder.Entity("Database.Entities.GameScoreAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_game_score_admin_notes");

                    b.HasIndex("AdminUserId")
                        .HasDatabaseName("ix_game_score_admin_notes_admin_user_id");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_game_score_admin_notes_reference_id");

                    b.ToTable("game_score_admin_notes", (string)null);
                });

            modelBuilder.Entity("Database.Entities.GameScoreAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer")
                        .HasColumnName("action_user_id");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id_lock");

                    b.HasKey("Id")
                        .HasName("pk_game_score_audits");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_game_score_audits_reference_id");

                    b.ToTable("game_score_audits", (string)null);
                });

            modelBuilder.Entity("Database.Entities.GameWinRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.PrimitiveCollection<int[]>("LoserRoster")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("loser_roster");

                    b.Property<int>("LoserScore")
                        .HasColumnType("integer")
                        .HasColumnName("loser_score");

                    b.Property<int>("LoserTeam")
                        .HasColumnType("integer")
                        .HasColumnName("loser_team");

                    b.PrimitiveCollection<int[]>("WinnerRoster")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("winner_roster");

                    b.Property<int>("WinnerScore")
                        .HasColumnType("integer")
                        .HasColumnName("winner_score");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("integer")
                        .HasColumnName("winner_team");

                    b.HasKey("Id")
                        .HasName("pk_game_win_records");

                    b.HasIndex("GameId")
                        .IsUnique()
                        .HasDatabaseName("ix_game_win_records_game_id");

                    b.HasIndex("WinnerRoster")
                        .HasDatabaseName("ix_game_win_records_winner_roster");

                    b.ToTable("game_win_records", (string)null);
                });

            modelBuilder.Entity("Database.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_processing_date")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint")
                        .HasColumnName("osu_id");

                    b.Property<int>("ProcessingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("processing_status");

                    b.Property<int>("RejectionReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("rejection_reason");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int?>("SubmittedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("submitted_by_user_id");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("verification_status");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_by_user_id");

                    b.Property<int>("WarningFlags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("warning_flags");

                    b.HasKey("Id")
                        .HasName("pk_matches");

                    b.HasIndex("OsuId")
                        .IsUnique()
                        .HasDatabaseName("ix_matches_osu_id");

                    b.HasIndex("SubmittedByUserId")
                        .HasDatabaseName("ix_matches_submitted_by_user_id");

                    b.HasIndex("TournamentId")
                        .HasDatabaseName("ix_matches_tournament_id");

                    b.HasIndex("VerifiedByUserId")
                        .HasDatabaseName("ix_matches_verified_by_user_id");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("Database.Entities.MatchAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_match_admin_notes");

                    b.HasIndex("AdminUserId")
                        .HasDatabaseName("ix_match_admin_notes_admin_user_id");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_match_admin_notes_reference_id");

                    b.ToTable("match_admin_notes", (string)null);
                });

            modelBuilder.Entity("Database.Entities.MatchAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer")
                        .HasColumnName("action_user_id");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id_lock");

                    b.HasKey("Id")
                        .HasName("pk_match_audits");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_match_audits_reference_id");

                    b.ToTable("match_audits", (string)null);
                });

            modelBuilder.Entity("Database.Entities.MatchWinRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.PrimitiveCollection<int[]>("LoserRoster")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("loser_roster");

                    b.Property<int>("LoserScore")
                        .HasColumnType("integer")
                        .HasColumnName("loser_score");

                    b.Property<int>("LoserTeam")
                        .HasColumnType("integer")
                        .HasColumnName("loser_team");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.PrimitiveCollection<int[]>("WinnerRoster")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("winner_roster");

                    b.Property<int>("WinnerScore")
                        .HasColumnType("integer")
                        .HasColumnName("winner_score");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("integer")
                        .HasColumnName("winner_team");

                    b.HasKey("Id")
                        .HasName("pk_match_win_records");

                    b.HasIndex("LoserRoster")
                        .HasDatabaseName("ix_match_win_records_loser_roster");

                    b.HasIndex("MatchId")
                        .IsUnique()
                        .HasDatabaseName("ix_match_win_records_match_id");

                    b.HasIndex("WinnerRoster")
                        .HasDatabaseName("ix_match_win_records_winner_roster");

                    b.ToTable("match_win_records", (string)null);
                });

            modelBuilder.Entity("Database.Entities.OAuthClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("RateLimitOverride")
                        .HasColumnType("integer")
                        .HasColumnName("rate_limit_override");

                    b.PrimitiveCollection<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("secret");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_o_auth_clients");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_o_auth_clients_user_id");

                    b.ToTable("o_auth_clients", (string)null);
                });

            modelBuilder.Entity("Database.Entities.OAuthClientAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_o_auth_client_admin_note");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_o_auth_client_admin_note_reference_id");

                    b.ToTable("o_auth_client_admin_note", (string)null);
                });

            modelBuilder.Entity("Database.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasDefaultValue("")
                        .HasColumnName("country");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DefaultRuleset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("default_ruleset");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint")
                        .HasColumnName("osu_id");

                    b.Property<DateTime>("OsuLastFetch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("osu_last_fetch")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime>("OsuTrackLastFetch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("osu_track_last_fetch")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.HasIndex("OsuId")
                        .IsUnique()
                        .HasDatabaseName("ix_players_osu_id");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("Database.Entities.PlayerAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_player_admin_notes");

                    b.HasIndex("AdminUserId")
                        .HasDatabaseName("ix_player_admin_notes_admin_user_id");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_player_admin_notes_reference_id");

                    b.ToTable("player_admin_notes", (string)null);
                });

            modelBuilder.Entity("Database.Entities.PlayerHighestRanks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryRank")
                        .HasColumnType("integer")
                        .HasColumnName("country_rank");

                    b.Property<DateTime>("CountryRankDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("country_rank_date");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GlobalRank")
                        .HasColumnType("integer")
                        .HasColumnName("global_rank");

                    b.Property<DateTime>("GlobalRankDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("global_rank_date");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_player_highest_ranks");

                    b.HasIndex("CountryRank")
                        .IsDescending()
                        .HasDatabaseName("ix_player_highest_ranks_country_rank");

                    b.HasIndex("GlobalRank")
                        .IsDescending()
                        .HasDatabaseName("ix_player_highest_ranks_global_rank");

                    b.HasIndex("PlayerId", "Ruleset")
                        .IsUnique()
                        .HasDatabaseName("ix_player_highest_ranks_player_id_ruleset");

                    b.ToTable("player_highest_ranks", (string)null);
                });

            modelBuilder.Entity("Database.Entities.PlayerMatchStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageAccuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("average_accuracy");

                    b.Property<double>("AverageMisses")
                        .HasColumnType("double precision")
                        .HasColumnName("average_misses");

                    b.Property<double>("AveragePlacement")
                        .HasColumnType("double precision")
                        .HasColumnName("average_placement");

                    b.Property<double>("AverageScore")
                        .HasColumnType("double precision")
                        .HasColumnName("average_score");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<double>("MatchCost")
                        .HasColumnType("double precision")
                        .HasColumnName("match_cost");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.PrimitiveCollection<int[]>("OpponentIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("opponent_ids");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.PrimitiveCollection<int[]>("TeammateIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("teammate_ids");

                    b.Property<bool>("Won")
                        .HasColumnType("boolean")
                        .HasColumnName("won");

                    b.HasKey("Id")
                        .HasName("pk_player_match_stats");

                    b.HasIndex("MatchId")
                        .HasDatabaseName("ix_player_match_stats_match_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_player_match_stats_player_id");

                    b.HasIndex("PlayerId", "MatchId")
                        .IsUnique()
                        .HasDatabaseName("ix_player_match_stats_player_id_match_id");

                    b.HasIndex("PlayerId", "Won")
                        .HasDatabaseName("ix_player_match_stats_player_id_won");

                    b.ToTable("player_match_stats", (string)null);
                });

            modelBuilder.Entity("Database.Entities.PlayerOsuRulesetData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EarliestGlobalRank")
                        .HasColumnType("integer")
                        .HasColumnName("earliest_global_rank");

                    b.Property<DateTime?>("EarliestGlobalRankDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("earliest_global_rank_date");

                    b.Property<int>("GlobalRank")
                        .HasColumnType("integer")
                        .HasColumnName("global_rank");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<double>("Pp")
                        .HasColumnType("double precision")
                        .HasColumnName("pp");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_player_osu_ruleset_data");

                    b.HasIndex("PlayerId", "Ruleset")
                        .IsUnique()
                        .HasDatabaseName("ix_player_osu_ruleset_data_player_id_ruleset");

                    b.ToTable("player_osu_ruleset_data", (string)null);
                });

            modelBuilder.Entity("Database.Entities.PlayerTournamentStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageAccuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("average_accuracy");

                    b.Property<double>("AverageMatchCost")
                        .HasColumnType("double precision")
                        .HasColumnName("average_match_cost");

                    b.Property<double>("AveragePlacement")
                        .HasColumnType("double precision")
                        .HasColumnName("average_placement");

                    b.Property<double>("AverageRatingDelta")
                        .HasColumnType("double precision")
                        .HasColumnName("average_rating_delta");

                    b.Property<int>("AverageScore")
                        .HasColumnType("integer")
                        .HasColumnName("average_score");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<int>("MatchesLost")
                        .HasColumnType("integer")
                        .HasColumnName("matches_lost");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("matches_played");

                    b.Property<int>("MatchesWon")
                        .HasColumnType("integer")
                        .HasColumnName("matches_won");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.PrimitiveCollection<int[]>("TeammateIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("teammate_ids");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id")
                        .HasName("pk_player_tournament_stats");

                    b.HasIndex("TournamentId")
                        .HasDatabaseName("ix_player_tournament_stats_tournament_id");

                    b.HasIndex("PlayerId", "TournamentId")
                        .IsUnique()
                        .HasDatabaseName("ix_player_tournament_stats_player_id_tournament_id");

                    b.ToTable("player_tournament_stats", (string)null);
                });

            modelBuilder.Entity("Database.Entities.Processor.PlayerRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryRank")
                        .HasColumnType("integer")
                        .HasColumnName("country_rank");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GlobalRank")
                        .HasColumnType("integer")
                        .HasColumnName("global_rank");

                    b.Property<double>("Percentile")
                        .HasColumnType("double precision")
                        .HasColumnName("percentile");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<double>("Volatility")
                        .HasColumnType("double precision")
                        .HasColumnName("volatility");

                    b.HasKey("Id")
                        .HasName("pk_player_ratings");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_player_ratings_player_id");

                    b.HasIndex("Rating")
                        .IsDescending()
                        .HasDatabaseName("ix_player_ratings_rating");

                    b.HasIndex("Ruleset")
                        .HasDatabaseName("ix_player_ratings_ruleset");

                    b.HasIndex("PlayerId", "Ruleset")
                        .IsUnique()
                        .HasDatabaseName("ix_player_ratings_player_id_ruleset");

                    b.ToTable("player_ratings", (string)null);
                });

            modelBuilder.Entity("Database.Entities.Processor.RatingAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdjustmentType")
                        .HasColumnType("integer")
                        .HasColumnName("adjustment_type");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("PlayerRatingId")
                        .HasColumnType("integer")
                        .HasColumnName("player_rating_id");

                    b.Property<double>("RatingAfter")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_after");

                    b.Property<double>("RatingBefore")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_before");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<double>("VolatilityAfter")
                        .HasColumnType("double precision")
                        .HasColumnName("volatility_after");

                    b.Property<double>("VolatilityBefore")
                        .HasColumnType("double precision")
                        .HasColumnName("volatility_before");

                    b.HasKey("Id")
                        .HasName("pk_rating_adjustments");

                    b.HasIndex("MatchId")
                        .HasDatabaseName("ix_rating_adjustments_match_id");

                    b.HasIndex("PlayerRatingId")
                        .HasDatabaseName("ix_rating_adjustments_player_rating_id");

                    b.HasIndex("PlayerId", "MatchId")
                        .IsUnique()
                        .HasDatabaseName("ix_rating_adjustments_player_id_match_id");

                    b.HasIndex("PlayerId", "Timestamp")
                        .HasDatabaseName("ix_rating_adjustments_player_id_timestamp");

                    b.ToTable("rating_adjustments", (string)null);
                });

            modelBuilder.Entity("Database.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("abbreviation");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<string>("ForumUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("forum_url");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_processing_date")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("LobbySize")
                        .HasColumnType("integer")
                        .HasColumnName("lobby_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.Property<int>("ProcessingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("processing_status");

                    b.Property<int>("RankRangeLowerBound")
                        .HasColumnType("integer")
                        .HasColumnName("rank_range_lower_bound");

                    b.Property<int>("RejectionReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("rejection_reason");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int?>("SubmittedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("submitted_by_user_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("verification_status");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_by_user_id");

                    b.HasKey("Id")
                        .HasName("pk_tournaments");

                    b.HasIndex("Ruleset")
                        .HasDatabaseName("ix_tournaments_ruleset");

                    b.HasIndex("SubmittedByUserId")
                        .HasDatabaseName("ix_tournaments_submitted_by_user_id");

                    b.HasIndex("VerifiedByUserId")
                        .HasDatabaseName("ix_tournaments_verified_by_user_id");

                    b.HasIndex("Name", "Abbreviation")
                        .IsUnique()
                        .HasDatabaseName("ix_tournaments_name_abbreviation");

                    b.ToTable("tournaments", (string)null);
                });

            modelBuilder.Entity("Database.Entities.TournamentAdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_tournament_admin_notes");

                    b.HasIndex("AdminUserId")
                        .HasDatabaseName("ix_tournament_admin_notes_admin_user_id");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_tournament_admin_notes_reference_id");

                    b.ToTable("tournament_admin_notes", (string)null);
                });

            modelBuilder.Entity("Database.Entities.TournamentAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer")
                        .HasColumnName("action_user_id");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id_lock");

                    b.HasKey("Id")
                        .HasName("pk_tournament_audits");

                    b.HasIndex("ReferenceId")
                        .HasDatabaseName("ix_tournament_audits_reference_id");

                    b.ToTable("tournament_audits", (string)null);
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.PrimitiveCollection<string[]>("Scopes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValue(new string[0])
                        .HasColumnName("scopes");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_player_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Database.Entities.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DefaultRuleset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("default_ruleset");

                    b.Property<bool>("DefaultRulesetIsControlled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("default_ruleset_is_controlled");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_settings");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_settings_user_id");

                    b.ToTable("user_settings", (string)null);
                });

            modelBuilder.Entity("join_beatmap_creators", b =>
                {
                    b.Property<int>("CreatedBeatmapsId")
                        .HasColumnType("integer")
                        .HasColumnName("created_beatmaps_id");

                    b.Property<int>("CreatorsId")
                        .HasColumnType("integer")
                        .HasColumnName("creators_id");

                    b.HasKey("CreatedBeatmapsId", "CreatorsId")
                        .HasName("pk_join_beatmap_creators");

                    b.HasIndex("CreatorsId")
                        .HasDatabaseName("ix_join_beatmap_creators_creators_id");

                    b.ToTable("join_beatmap_creators", (string)null);
                });

            modelBuilder.Entity("join_pooled_beatmaps", b =>
                {
                    b.Property<int>("PooledBeatmapsId")
                        .HasColumnType("integer")
                        .HasColumnName("pooled_beatmaps_id");

                    b.Property<int>("TournamentsPooledInId")
                        .HasColumnType("integer")
                        .HasColumnName("tournaments_pooled_in_id");

                    b.HasKey("PooledBeatmapsId", "TournamentsPooledInId")
                        .HasName("pk_join_pooled_beatmaps");

                    b.HasIndex("TournamentsPooledInId")
                        .HasDatabaseName("ix_join_pooled_beatmaps_tournaments_pooled_in_id");

                    b.ToTable("join_pooled_beatmaps", (string)null);
                });

            modelBuilder.Entity("Database.Entities.Beatmap", b =>
                {
                    b.HasOne("Database.Entities.Beatmapset", "Beatmapset")
                        .WithMany("Beatmaps")
                        .HasForeignKey("BeatmapsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_beatmaps_beatmapsets_beatmapset_id");

                    b.Navigation("Beatmapset");
                });

            modelBuilder.Entity("Database.Entities.BeatmapAttributes", b =>
                {
                    b.HasOne("Database.Entities.Beatmap", "Beatmap")
                        .WithMany("Attributes")
                        .HasForeignKey("BeatmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_beatmap_attributes_beatmaps_beatmap_id");

                    b.Navigation("Beatmap");
                });

            modelBuilder.Entity("Database.Entities.Beatmapset", b =>
                {
                    b.HasOne("Database.Entities.Player", "Creator")
                        .WithMany("CreatedBeatmapsets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_beatmapsets_players_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Database.Entities.Game", b =>
                {
                    b.HasOne("Database.Entities.Beatmap", "Beatmap")
                        .WithMany("Games")
                        .HasForeignKey("BeatmapId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_games_beatmaps_beatmap_id");

                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("Games")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_games_matches_match_id");

                    b.Navigation("Beatmap");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Database.Entities.GameAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("GameAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_admin_notes_users_admin_user_id");

                    b.HasOne("Database.Entities.Game", "Game")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_admin_notes_games_reference_id");

                    b.Navigation("AdminUser");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Database.Entities.GameAudit", b =>
                {
                    b.HasOne("Database.Entities.Game", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_game_audits_games_reference_id");
                });

            modelBuilder.Entity("Database.Entities.GameScore", b =>
                {
                    b.HasOne("Database.Entities.Game", "Game")
                        .WithMany("Scores")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_scores_games_game_id");

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("Scores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_scores_players_player_id");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.GameScoreAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("GameScoreAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_score_admin_notes_users_admin_user_id");

                    b.HasOne("Database.Entities.GameScore", "Score")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_score_admin_notes_game_scores_reference_id");

                    b.Navigation("AdminUser");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("Database.Entities.GameScoreAudit", b =>
                {
                    b.HasOne("Database.Entities.GameScore", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_game_score_audits_game_scores_reference_id");
                });

            modelBuilder.Entity("Database.Entities.GameWinRecord", b =>
                {
                    b.HasOne("Database.Entities.Game", "Game")
                        .WithOne("WinRecord")
                        .HasForeignKey("Database.Entities.GameWinRecord", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_win_records_games_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Database.Entities.Match", b =>
                {
                    b.HasOne("Database.Entities.User", "SubmittedByUser")
                        .WithMany("SubmittedMatches")
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_matches_users_submitted_by_user_id");

                    b.HasOne("Database.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_matches_tournaments_tournament_id");

                    b.HasOne("Database.Entities.User", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_matches_users_verified_by_user_id");

                    b.Navigation("SubmittedByUser");

                    b.Navigation("Tournament");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Database.Entities.MatchAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("MatchAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_match_admin_notes_users_admin_user_id");

                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_match_admin_notes_matches_reference_id");

                    b.Navigation("AdminUser");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Database.Entities.MatchAudit", b =>
                {
                    b.HasOne("Database.Entities.Match", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_match_audits_matches_reference_id");
                });

            modelBuilder.Entity("Database.Entities.MatchWinRecord", b =>
                {
                    b.HasOne("Database.Entities.Match", "Match")
                        .WithOne("WinRecord")
                        .HasForeignKey("Database.Entities.MatchWinRecord", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_match_win_records_matches_match_id");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Database.Entities.OAuthClient", b =>
                {
                    b.HasOne("Database.Entities.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_o_auth_clients_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.OAuthClientAdminNote", b =>
                {
                    b.HasOne("Database.Entities.OAuthClient", "OAuthClient")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_o_auth_client_admin_note_o_auth_clients_reference_id");

                    b.Navigation("OAuthClient");
                });

            modelBuilder.Entity("Database.Entities.PlayerAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("PlayerAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_admin_notes_users_admin_user_id");

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_admin_notes_players_reference_id");

                    b.Navigation("AdminUser");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.PlayerHighestRanks", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("HighestRanks")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_highest_ranks_players_player_id");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.PlayerMatchStats", b =>
                {
                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_match_stats_matches_match_id");

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("MatchStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_match_stats_players_player_id");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.PlayerOsuRulesetData", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("RulesetData")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_osu_ruleset_data_players_player_id");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.PlayerTournamentStats", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("TournamentStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_tournament_stats_players_player_id");

                    b.HasOne("Database.Entities.Tournament", "Tournament")
                        .WithMany("PlayerTournamentStats")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_tournament_stats_tournaments_tournament_id");

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Database.Entities.Processor.PlayerRating", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("Ratings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_ratings_players_player_id");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.Processor.RatingAdjustment", b =>
                {
                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("PlayerRatingAdjustments")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_rating_adjustments_matches_match_id");

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("RatingAdjustments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rating_adjustments_players_player_id");

                    b.HasOne("Database.Entities.Processor.PlayerRating", "PlayerRating")
                        .WithMany("Adjustments")
                        .HasForeignKey("PlayerRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rating_adjustments_player_ratings_player_rating_id");

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("PlayerRating");
                });

            modelBuilder.Entity("Database.Entities.Tournament", b =>
                {
                    b.HasOne("Database.Entities.User", "SubmittedByUser")
                        .WithMany("SubmittedTournaments")
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_tournaments_users_submitted_by_user_id");

                    b.HasOne("Database.Entities.User", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_tournaments_users_verified_by_user_id");

                    b.Navigation("SubmittedByUser");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Database.Entities.TournamentAdminNote", b =>
                {
                    b.HasOne("Database.Entities.User", "AdminUser")
                        .WithMany("TournamentAdminNotes")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tournament_admin_notes_users_admin_user_id");

                    b.HasOne("Database.Entities.Tournament", "Tournament")
                        .WithMany("AdminNotes")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tournament_admin_notes_tournaments_reference_id");

                    b.Navigation("AdminUser");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Database.Entities.TournamentAudit", b =>
                {
                    b.HasOne("Database.Entities.Tournament", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_tournament_audits_tournaments_reference_id");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithOne("User")
                        .HasForeignKey("Database.Entities.User", "PlayerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_users_players_player_id");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.UserSettings", b =>
                {
                    b.HasOne("Database.Entities.User", null)
                        .WithOne("Settings")
                        .HasForeignKey("Database.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_settings_users_user_id");
                });

            modelBuilder.Entity("join_beatmap_creators", b =>
                {
                    b.HasOne("Database.Entities.Beatmap", null)
                        .WithMany()
                        .HasForeignKey("CreatedBeatmapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_join_beatmap_creators_beatmaps_created_beatmaps_id");

                    b.HasOne("Database.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("CreatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_join_beatmap_creators_players_creators_id");
                });

            modelBuilder.Entity("join_pooled_beatmaps", b =>
                {
                    b.HasOne("Database.Entities.Beatmap", null)
                        .WithMany()
                        .HasForeignKey("PooledBeatmapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_join_pooled_beatmaps_beatmaps_pooled_beatmaps_id");

                    b.HasOne("Database.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsPooledInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_join_pooled_beatmaps_tournaments_tournaments_pooled_in_id");
                });

            modelBuilder.Entity("Database.Entities.Beatmap", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Games");
                });

            modelBuilder.Entity("Database.Entities.Beatmapset", b =>
                {
                    b.Navigation("Beatmaps");
                });

            modelBuilder.Entity("Database.Entities.Game", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("Audits");

                    b.Navigation("Scores");

                    b.Navigation("WinRecord");
                });

            modelBuilder.Entity("Database.Entities.GameScore", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("Audits");
                });

            modelBuilder.Entity("Database.Entities.Match", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("Audits");

                    b.Navigation("Games");

                    b.Navigation("PlayerMatchStats");

                    b.Navigation("PlayerRatingAdjustments");

                    b.Navigation("WinRecord");
                });

            modelBuilder.Entity("Database.Entities.OAuthClient", b =>
                {
                    b.Navigation("AdminNotes");
                });

            modelBuilder.Entity("Database.Entities.Player", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("CreatedBeatmapsets");

                    b.Navigation("HighestRanks");

                    b.Navigation("MatchStats");

                    b.Navigation("RatingAdjustments");

                    b.Navigation("Ratings");

                    b.Navigation("RulesetData");

                    b.Navigation("Scores");

                    b.Navigation("TournamentStats");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.Processor.PlayerRating", b =>
                {
                    b.Navigation("Adjustments");
                });

            modelBuilder.Entity("Database.Entities.Tournament", b =>
                {
                    b.Navigation("AdminNotes");

                    b.Navigation("Audits");

                    b.Navigation("Matches");

                    b.Navigation("PlayerTournamentStats");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("GameAdminNotes");

                    b.Navigation("GameScoreAdminNotes");

                    b.Navigation("MatchAdminNotes");

                    b.Navigation("PlayerAdminNotes");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("SubmittedMatches");

                    b.Navigation("SubmittedTournaments");

                    b.Navigation("TournamentAdminNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
