// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(OtrContext))]
    [Migration("20240910032352_TournamentStartTimeEndTime_ColumnDefinition")]
    partial class TournamentStartTimeEndTime_ColumnDefinition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entities.Beatmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("Ar")
                        .HasColumnType("double precision")
                        .HasColumnName("ar");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("artist");

                    b.Property<double>("Bpm")
                        .HasColumnType("double precision")
                        .HasColumnName("bpm");

                    b.Property<int>("CircleCount")
                        .HasColumnType("integer")
                        .HasColumnName("circle_count");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Cs")
                        .HasColumnType("double precision")
                        .HasColumnName("cs");

                    b.Property<string>("DiffName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("diff_name");

                    b.Property<bool>("HasData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("has_data");

                    b.Property<double>("Hp")
                        .HasColumnType("double precision")
                        .HasColumnName("hp");

                    b.Property<double>("Length")
                        .HasColumnType("double precision")
                        .HasColumnName("length");

                    b.Property<long>("MapperId")
                        .HasColumnType("bigint")
                        .HasColumnName("mapper_id");

                    b.Property<string>("MapperName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("mapper_name");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("integer")
                        .HasColumnName("max_combo");

                    b.Property<double>("Od")
                        .HasColumnType("double precision")
                        .HasColumnName("od");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint")
                        .HasColumnName("osu_id");

                    b.Property<int>("RankedStatus")
                        .HasColumnType("integer")
                        .HasColumnName("ranked_status");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<int>("SliderCount")
                        .HasColumnType("integer")
                        .HasColumnName("slider_count");

                    b.Property<int>("SpinnerCount")
                        .HasColumnType("integer")
                        .HasColumnName("spinner_count");

                    b.Property<double>("Sr")
                        .HasColumnType("double precision")
                        .HasColumnName("sr");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("OsuId")
                        .IsUnique();

                    b.ToTable("beatmaps");
                });

            modelBuilder.Entity("Database.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeatmapId")
                        .HasColumnType("integer")
                        .HasColumnName("beatmap_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_processing_date")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.Property<int>("Mods")
                        .HasColumnType("integer")
                        .HasColumnName("mods");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint")
                        .HasColumnName("osu_id");

                    b.Property<double>("PostModSr")
                        .HasColumnType("double precision")
                        .HasColumnName("post_mod_sr");

                    b.Property<int>("ProcessingStatus")
                        .HasColumnType("integer")
                        .HasColumnName("processing_status");

                    b.Property<int>("RejectionReason")
                        .HasColumnType("integer")
                        .HasColumnName("rejection_reason");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<int>("ScoringType")
                        .HasColumnType("integer")
                        .HasColumnName("scoring_type");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("TeamType")
                        .HasColumnType("integer")
                        .HasColumnName("team_type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("verification_status");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId");

                    b.HasIndex("MatchId");

                    b.HasIndex("OsuId")
                        .IsUnique();

                    b.HasIndex("StartTime");

                    b.ToTable("games");
                });

            modelBuilder.Entity("Database.Entities.GameAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer")
                        .HasColumnName("action_user_id");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("ref_id");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer")
                        .HasColumnName("ref_id_lock");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("game_audits");
                });

            modelBuilder.Entity("Database.Entities.GameScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Count100")
                        .HasColumnType("integer")
                        .HasColumnName("count_100");

                    b.Property<int>("Count300")
                        .HasColumnType("integer")
                        .HasColumnName("count_300");

                    b.Property<int>("Count50")
                        .HasColumnType("integer")
                        .HasColumnName("count_50");

                    b.Property<int>("CountGeki")
                        .HasColumnType("integer")
                        .HasColumnName("count_geki");

                    b.Property<int>("CountKatu")
                        .HasColumnType("integer")
                        .HasColumnName("count_katu");

                    b.Property<int>("CountMiss")
                        .HasColumnType("integer")
                        .HasColumnName("count_miss");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_processing_date")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("integer")
                        .HasColumnName("max_combo");

                    b.Property<int>("Mods")
                        .HasColumnType("integer")
                        .HasColumnName("mods");

                    b.Property<bool>("Pass")
                        .HasColumnType("boolean")
                        .HasColumnName("pass");

                    b.Property<bool>("Perfect")
                        .HasColumnType("boolean")
                        .HasColumnName("perfect");

                    b.Property<int>("Placement")
                        .HasColumnType("integer")
                        .HasColumnName("placement");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("ProcessingStatus")
                        .HasColumnType("integer")
                        .HasColumnName("processing_status");

                    b.Property<int>("RejectionReason")
                        .HasColumnType("integer")
                        .HasColumnName("rejection_reason");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("Team")
                        .HasColumnType("integer")
                        .HasColumnName("team");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("verification_status");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId", "GameId")
                        .IsUnique();

                    b.ToTable("game_scores");
                });

            modelBuilder.Entity("Database.Entities.GameScoreAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer")
                        .HasColumnName("action_user_id");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("ref_id");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer")
                        .HasColumnName("ref_id_lock");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("game_score_audits");
                });

            modelBuilder.Entity("Database.Entities.GameWinRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int[]>("LoserRoster")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("loser_roster");

                    b.Property<int>("LoserScore")
                        .HasColumnType("integer")
                        .HasColumnName("loser_score");

                    b.Property<int>("LoserTeam")
                        .HasColumnType("integer")
                        .HasColumnName("loser_team");

                    b.Property<int[]>("WinnerRoster")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("winner_roster");

                    b.Property<int>("WinnerScore")
                        .HasColumnType("integer")
                        .HasColumnName("winner_score");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("integer")
                        .HasColumnName("winner_team");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.HasIndex("WinnerRoster");

                    b.ToTable("game_win_records");
                });

            modelBuilder.Entity("Database.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_processing_date")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint")
                        .HasColumnName("osu_id");

                    b.Property<int>("ProcessingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("processing_status");

                    b.Property<int>("RejectionReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("rejection_reason");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int?>("SubmittedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("submitted_by_user_id");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("verification_status");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_by_user_id");

                    b.HasKey("Id");

                    b.HasIndex("OsuId")
                        .IsUnique();

                    b.HasIndex("SubmittedByUserId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("Database.Entities.MatchAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer")
                        .HasColumnName("action_user_id");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("ref_id");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer")
                        .HasColumnName("ref_id_lock");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("match_audits");
                });

            modelBuilder.Entity("Database.Entities.MatchWinRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int[]>("LoserRoster")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("loser_roster");

                    b.Property<int>("LoserScore")
                        .HasColumnType("integer")
                        .HasColumnName("loser_score");

                    b.Property<int>("LoserTeam")
                        .HasColumnType("integer")
                        .HasColumnName("loser_team");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.Property<int[]>("WinnerRoster")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("winner_roster");

                    b.Property<int>("WinnerScore")
                        .HasColumnType("integer")
                        .HasColumnName("winner_score");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("integer")
                        .HasColumnName("winner_team");

                    b.HasKey("Id");

                    b.HasIndex("LoserRoster");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("WinnerRoster");

                    b.ToTable("match_win_records");
                });

            modelBuilder.Entity("Database.Entities.OAuthClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("secret");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("oauth_clients");
                });

            modelBuilder.Entity("Database.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasDefaultValue("")
                        .HasColumnName("country");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("OsuId")
                        .HasColumnType("bigint")
                        .HasColumnName("osu_id");

                    b.Property<DateTime>("OsuLastFetch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("osu_last_fetch")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<DateTime>("OsuTrackLastFetch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("osu_track_last_fetch")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("Ruleset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("default_ruleset");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("OsuId")
                        .IsUnique();

                    b.ToTable("players");
                });

            modelBuilder.Entity("Database.Entities.PlayerMatchStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageAccuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("average_accuracy");

                    b.Property<double>("AverageMisses")
                        .HasColumnType("double precision")
                        .HasColumnName("average_misses");

                    b.Property<double>("AveragePlacement")
                        .HasColumnType("double precision")
                        .HasColumnName("average_placement");

                    b.Property<double>("AverageScore")
                        .HasColumnType("double precision")
                        .HasColumnName("average_score");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<double>("MatchCost")
                        .HasColumnType("double precision")
                        .HasColumnName("match_cost");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.Property<int[]>("OpponentIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("opponent_ids");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int[]>("TeammateIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("teammate_ids");

                    b.Property<bool>("Won")
                        .HasColumnType("boolean")
                        .HasColumnName("won");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId", "MatchId")
                        .IsUnique();

                    b.HasIndex("PlayerId", "Won");

                    b.ToTable("player_match_stats");
                });

            modelBuilder.Entity("Database.Entities.PlayerTournamentStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageAccuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("average_accuracy");

                    b.Property<double>("AverageMatchCost")
                        .HasColumnType("double precision")
                        .HasColumnName("average_match_cost");

                    b.Property<double>("AveragePlacement")
                        .HasColumnType("double precision")
                        .HasColumnName("average_placement");

                    b.Property<double>("AverageRatingDelta")
                        .HasColumnType("double precision")
                        .HasColumnName("average_rating_delta");

                    b.Property<int>("AverageScore")
                        .HasColumnType("integer")
                        .HasColumnName("average_score");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer")
                        .HasColumnName("games_lost");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<int>("MatchesLost")
                        .HasColumnType("integer")
                        .HasColumnName("matches_lost");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("matches_played");

                    b.Property<int>("MatchesWon")
                        .HasColumnType("integer")
                        .HasColumnName("matches_won");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int[]>("TeammateIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("teammate_ids");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("PlayerId", "TournamentId")
                        .IsUnique();

                    b.ToTable("player_tournament_stats");
                });

            modelBuilder.Entity("Database.Entities.Processor.PlayerRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryRank")
                        .HasColumnType("integer")
                        .HasColumnName("country_rank");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GlobalRank")
                        .HasColumnType("integer")
                        .HasColumnName("global_rank");

                    b.Property<double>("Percentile")
                        .HasColumnType("double precision")
                        .HasColumnName("percentile");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<double>("Volatility")
                        .HasColumnType("double precision")
                        .HasColumnName("volatility");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Rating")
                        .IsDescending();

                    b.HasIndex("Ruleset");

                    b.HasIndex("PlayerId", "Ruleset")
                        .IsUnique();

                    b.ToTable("player_ratings");
                });

            modelBuilder.Entity("Database.Entities.Processor.RatingAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AdjustmentType")
                        .HasColumnType("integer")
                        .HasColumnName("adjustment_type");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("PlayerRatingId")
                        .HasColumnType("integer")
                        .HasColumnName("player_rating_id");

                    b.Property<double>("RatingAfter")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_after");

                    b.Property<double>("RatingBefore")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_before");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<double>("VolatilityAfter")
                        .HasColumnType("double precision")
                        .HasColumnName("volatility_after");

                    b.Property<double>("VolatilityBefore")
                        .HasColumnType("double precision")
                        .HasColumnName("volatility_before");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerRatingId");

                    b.HasIndex("PlayerId", "MatchId")
                        .IsUnique();

                    b.HasIndex("PlayerId", "Timestamp");

                    b.ToTable("rating_adjustments");
                });

            modelBuilder.Entity("Database.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("abbreviation");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<string>("ForumUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("forum_url");

                    b.Property<DateTime>("LastProcessingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_processing_date")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int>("LobbySize")
                        .HasColumnType("integer")
                        .HasColumnName("lobby_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.Property<int>("ProcessingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("processing_status");

                    b.Property<int>("RankRangeLowerBound")
                        .HasColumnType("integer")
                        .HasColumnName("rank_range_lower_bound");

                    b.Property<int>("RejectionReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("rejection_reason");

                    b.Property<int>("Ruleset")
                        .HasColumnType("integer")
                        .HasColumnName("ruleset");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time")
                        .HasDefaultValueSql("'2007-09-17T00:00:00'::timestamp");

                    b.Property<int?>("SubmittedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("submitted_by_user_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("VerificationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("verification_status");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_by_user_id");

                    b.HasKey("Id");

                    b.HasIndex("Ruleset");

                    b.HasIndex("SubmittedByUserId");

                    b.HasIndex("VerifiedByUserId");

                    b.HasIndex("Name", "Abbreviation")
                        .IsUnique();

                    b.ToTable("tournaments");
                });

            modelBuilder.Entity("Database.Entities.TournamentAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("integer")
                        .HasColumnName("action_user_id");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("ref_id");

                    b.Property<int>("ReferenceIdLock")
                        .HasColumnType("integer")
                        .HasColumnName("ref_id_lock");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("tournament_audits");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<string[]>("Scopes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasDefaultValue(new string[0])
                        .HasColumnName("scopes");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Database.Entities.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DefaultRuleset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("default_ruleset");

                    b.Property<bool>("DefaultRulesetIsControlled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("default_ruleset_controlled");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_settings");
                });

            modelBuilder.Entity("Database.Entities.Game", b =>
                {
                    b.HasOne("Database.Entities.Beatmap", "Beatmap")
                        .WithMany("Games")
                        .HasForeignKey("BeatmapId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("Games")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beatmap");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Database.Entities.GameAudit", b =>
                {
                    b.HasOne("Database.Entities.Game", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Database.Entities.GameScore", b =>
                {
                    b.HasOne("Database.Entities.Game", "Game")
                        .WithMany("Scores")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("Scores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.GameScoreAudit", b =>
                {
                    b.HasOne("Database.Entities.GameScore", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Database.Entities.GameWinRecord", b =>
                {
                    b.HasOne("Database.Entities.Game", "Game")
                        .WithOne("WinRecord")
                        .HasForeignKey("Database.Entities.GameWinRecord", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Database.Entities.Match", b =>
                {
                    b.HasOne("Database.Entities.User", "SubmittedByUser")
                        .WithMany("SubmittedMatches")
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.User", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SubmittedByUser");

                    b.Navigation("Tournament");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Database.Entities.MatchAudit", b =>
                {
                    b.HasOne("Database.Entities.Match", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Database.Entities.MatchWinRecord", b =>
                {
                    b.HasOne("Database.Entities.Match", "Match")
                        .WithOne("WinRecord")
                        .HasForeignKey("Database.Entities.MatchWinRecord", "MatchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Database.Entities.OAuthClient", b =>
                {
                    b.HasOne("Database.Entities.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Entities.RateLimitOverrides", "RateLimitOverrides", b1 =>
                        {
                            b1.Property<int>("OAuthClientId")
                                .HasColumnType("integer");

                            b1.Property<int?>("PermitLimit")
                                .HasColumnType("integer")
                                .HasColumnName("permit_limit");

                            b1.Property<int?>("Window")
                                .HasColumnType("integer")
                                .HasColumnName("window");

                            b1.HasKey("OAuthClientId");

                            b1.ToTable("oauth_clients");

                            b1.ToJson("rate_limit_overrides");

                            b1.WithOwner()
                                .HasForeignKey("OAuthClientId");
                        });

                    b.Navigation("RateLimitOverrides")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.Player", b =>
                {
                    b.OwnsMany("Database.Entities.PlayerOsuRulesetData", "RulesetData", b1 =>
                        {
                            b1.Property<int>("PlayerId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int?>("EarliestGlobalRank")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("EarliestGlobalRankDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("GlobalRank")
                                .HasColumnType("integer");

                            b1.Property<double>("Pp")
                                .HasColumnType("double precision");

                            b1.Property<int>("Ruleset")
                                .HasColumnType("integer");

                            b1.HasKey("PlayerId", "Id");

                            b1.ToTable("players");

                            b1.ToJson("ruleset_data");

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.Navigation("RulesetData");
                });

            modelBuilder.Entity("Database.Entities.PlayerMatchStats", b =>
                {
                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("PlayerMatchStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("MatchStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.PlayerTournamentStats", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("TournamentStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Tournament", "Tournament")
                        .WithMany("PlayerTournamentStats")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Database.Entities.Processor.PlayerRating", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("Ratings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Database.Entities.Processor.RatingAdjustment", b =>
                {
                    b.HasOne("Database.Entities.Match", "Match")
                        .WithMany("PlayerRatingAdjustments")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Entities.Player", "Player")
                        .WithMany("RatingAdjustments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Processor.PlayerRating", "PlayerRating")
                        .WithMany("Adjustments")
                        .HasForeignKey("PlayerRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("PlayerRating");
                });

            modelBuilder.Entity("Database.Entities.Tournament", b =>
                {
                    b.HasOne("Database.Entities.User", "SubmittedByUser")
                        .WithMany("SubmittedTournaments")
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Entities.User", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SubmittedByUser");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Database.Entities.TournamentAudit", b =>
                {
                    b.HasOne("Database.Entities.Tournament", null)
                        .WithMany("Audits")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.HasOne("Database.Entities.Player", "Player")
                        .WithOne("User")
                        .HasForeignKey("Database.Entities.User", "PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Database.Entities.RateLimitOverrides", "RateLimitOverrides", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<int?>("PermitLimit")
                                .HasColumnType("integer")
                                .HasColumnName("permit_limit");

                            b1.Property<int?>("Window")
                                .HasColumnType("integer")
                                .HasColumnName("window");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.ToJson("rate_limit_overrides");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Player");

                    b.Navigation("RateLimitOverrides")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Entities.UserSettings", b =>
                {
                    b.HasOne("Database.Entities.User", null)
                        .WithOne("Settings")
                        .HasForeignKey("Database.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Entities.Beatmap", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Database.Entities.Game", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Scores");

                    b.Navigation("WinRecord");
                });

            modelBuilder.Entity("Database.Entities.GameScore", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("Database.Entities.Match", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Games");

                    b.Navigation("PlayerMatchStats");

                    b.Navigation("PlayerRatingAdjustments");

                    b.Navigation("WinRecord");
                });

            modelBuilder.Entity("Database.Entities.Player", b =>
                {
                    b.Navigation("MatchStats");

                    b.Navigation("RatingAdjustments");

                    b.Navigation("Ratings");

                    b.Navigation("Scores");

                    b.Navigation("TournamentStats");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.Processor.PlayerRating", b =>
                {
                    b.Navigation("Adjustments");
                });

            modelBuilder.Entity("Database.Entities.Tournament", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Matches");

                    b.Navigation("PlayerTournamentStats");
                });

            modelBuilder.Entity("Database.Entities.User", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("SubmittedMatches");

                    b.Navigation("SubmittedTournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
